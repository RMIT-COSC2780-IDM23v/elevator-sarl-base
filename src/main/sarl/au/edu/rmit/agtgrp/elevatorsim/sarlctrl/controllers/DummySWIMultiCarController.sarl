/** 
 * DummySingleCarController by Sebastian Sardina  
 *  
 * Dummy controller, goes up to the top and down to the bottom over and over - does nothing else.
 * 
 * Objective is to show how to connect and send a car to a floor
 */
package au.edu.rmit.agtgrp.elevatorsim.sarlctrl.controllers

import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.capacities.Cap_Reporting
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.capacities.Cap_SimulatorInteraction

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.skills.Skill_SingleSimulatorInteraction
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.skills.Skill_ConsoleReporting

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.CarArrivedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.DoorClosedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.ModelChangePercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.SendCarAction
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.SimulationEnd

import au.edu.rmit.agtgrp.elevatorsim.Direction


import java.nio.file.Files
import java.nio.file.Paths

import au.edu.rmit.agtgrp.elevatorsim.sarlctrl.beliefs.KB_Elevator
import au.edu.rmit.agtgrp.elevatorsim.sarlctrl.beliefs.SWI_KB_Elevator


/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent DummySWIMultiCarController {
	uses DefaultContextInteractions
	uses Lifecycle
	uses Cap_SimulatorInteraction
	uses Cap_Reporting
	uses KB_Elevator



	val agentName = "Dummy-SWI"
	// Unique identifier assigned to this elevator
	var carID : int = -1

	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////// BELIEFS ////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	val DEFAULT_SIM_HOST = 'localhost'
	val DEFAULT_SIM_PORT = '8081'
	val DEFAULT_PROLOG_KB : String = "KB_elevator.pl"


	var noCars : int = 0 // no of cars in the simulation
	var lowestFloor : int // number of the lowest floor (e.g., 1)
	var highestFloor : int // number of the highest floor in the building

	var currentFloor : int = 1 // current floor the car is in
	var moving : boolean = false
		


	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	// /////////////////////////////////////// REACTIVE BEHAVIORS NOW ///////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////////////////////////////////////////
	on Initialize {
		var params = occurrence.parameters

		// ////////////
		// 1 - Setup Console Reporting skill to report/talk behavior
		//////////////
		setSkill(new Skill_ConsoleReporting(3, agentName), Cap_Reporting)

		// ////////////
		// 2 - Setup Prolog KB
		// ////////////

		// Get Prolog KB from -Dkb=<....> option or otherwise default to prolog_e
		val prolog_elev_kb = System.getProperty("kb", DEFAULT_PROLOG_KB)
		if (!Files.exists(Paths.get(prolog_elev_kb))) {
			reportMessage("The SWI KB file provided seems not to exist (specify via -Dkb=<swi file>), I am dying...")
			killMe
		}

		// Set up a new Prolog belief base
		// (we quote with ' ' to make the name a Prolog atom: no upper case, no  space, no functor
		val beliefSpace = String.format("'%s'", agentName)
		setSkill(new SWI_KB_Elevator(0, beliefSpace))

		// Load agent knowledge base
		kb_load(prolog_elev_kb)
		reportMessage("I have loaded the SWI KB successfully!")

		// ////////////
		// 3 - Setup skill to control elevator simulator
		// (includes connecting to simulator)
		// ////////////
		var simulator_host = System.getProperty("host", DEFAULT_SIM_HOST)
		var simulator_port : int = Integer.parseInt(System.getProperty("port", DEFAULT_SIM_PORT) as String) 
		if (params.size == 2) { // override  defaults if host + port has been given
			simulator_host = params.get(0) as String
			simulator_port = Integer.parseInt((params.get(1) as String))
		}
//		reportConnection()

		reportMessage(String.format("I will  am alive! My name is \"%s\"", agentName))
		setSkill(new Skill_SingleSimulatorInteraction(simulator_host, simulator_port, defaultSpace),
			Cap_SimulatorInteraction)

		reportMessage(String.format("I am alive! My name is \"%s\"", agentName))

		// ////////////
		// 4 - Establish connection/registration to simulator
		// (includes connecting to simulator)
		// ////////////
		try {
			act_connectToSimulator()
			//	reportMessage(String.format("Successfully connected to elevator hardware at %s:%s", simulator_host, simulator_port));
			reportConnection()
		} catch (e : Exception) {
			reportMessage("Unable to connect to simulator hardware, finishing...")
			killMe
		}
	}


	/* 
	 * Received when the simulation is configured and setup (received at the start)
	 */
	on ModelChangePercept {
		// Get the model for the floors
		var floors = occurrence.model.floors
		val cars = occurrence.model.cars
		
		// 1 - get floor bounds
		lowestFloor = floors.get(0).id
		highestFloor = floors.get(floors.size - 1).id
		currentFloor = lowestFloor
		noCars = cars.size
		reportMessage("Elevator lowest floor is " + lowestFloor + "; and highest floor is " + highestFloor)

		// OK start moving up to highest floor
		for(var i = 0; i < noCars; i++){
			sendCar(new SendCarAction(i, highestFloor, Direction.DOWN)) // this is the actual MOVEMENT action!
			moving = true
		}
	}

	/* 
	 * When the car arrives to the destination, report it..
	 */
	on CarArrivedPercept {
		reportArrivedAt(occurrence.car, occurrence.floor)
		currentFloor = occurrence.floor
		moving = false
		
		// Add car request to our beliefs
		kb_registerFloorArrived(occurrence.car, occurrence.floor, occurrence.id);
		// Dump the KB to a file.
		kb_dump()
	}


	/*
	 * When the door closes we can send the car to its next destination
	 */
	on DoorClosedPercept {
		var next_floor : int = -1
		var next_dir : Direction

		if (currentFloor == highestFloor) {
			next_floor = lowestFloor
			next_dir = Direction.UP
		} else if (currentFloor == lowestFloor) {
			next_floor = highestFloor
			next_dir = Direction.DOWN
		}
		
		if (next_floor > -1) {
			sendCar(new SendCarAction(occurrence.car, next_floor, next_dir)) // this is the actual MOVEMENT action!
			reportTravellingTo(occurrence.car, next_floor, next_dir)
			moving = true
		} 
		
	}

	on SimulationEnd {
		reportMessage("I am done, bye....")
		killMe
	}
	
	
}